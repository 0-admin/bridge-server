// Code generated by go-bindata.
// sources:
// migrations_compliance/01_init.sql
// migrations_gateway/01_init.sql
// DO NOT EDIT!

package mysql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations_compliance01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x4f\xfb\x30\x14\xc4\x77\x7f\x8a\x1b\x13\xfd\xff\x1d\x2a\x21\x84\x54\x75\x70\x1b\x03\x11\xa9\x53\x19\x67\xe8\x14\x5b\x8d\xa1\x1e\x62\x23\xf3\x0a\x15\x9f\x9e\x04\x09\xd2\x4a\x88\xf5\xdd\xfd\x4e\xef\x6e\x36\xc3\xbf\xde\x3f\x27\x4b\x0e\xcd\x0b\x5b\x2b\xc1\xb5\x80\xe6\xab\x4a\xc0\xf0\x23\x1d\x62\xf2\x1f\xae\xd3\xc9\x86\x57\xbb\x27\x1f\x83\x41\xc6\x00\xe3\x3b\x03\x1f\x28\x9b\xcf\x73\xc8\x5a\x43\x36\x55\x05\xde\xe8\xba\x2d\xe5\x90\xb2\x11\x52\xff\x1f\x7d\x34\x91\xed\xc8\xec\x0f\x36\x65\xd7\x57\x13\xf4\xe5\xea\x5d\x1f\x0d\xde\x6c\x9a\xe4\x6f\xe9\x3c\xe0\xd4\x25\x03\x72\x27\xba\xa4\xed\xcf\x9f\xad\x25\x83\x6e\x28\x43\xbe\x77\x97\xa6\xe1\x6a\x7f\x81\xb7\xaa\xdc\x70\xb5\xc3\x83\xd8\x21\x1b\x5b\xe5\x2c\x87\x90\x77\xa5\x14\xcb\x32\x84\x58\xac\x50\x88\x5b\xde\x54\x1a\xeb\x7b\xae\x1e\x85\x5e\x1e\xe9\xe9\x66\xc1\xd8\xf9\x74\x45\x7c\x0f\xac\x50\xf5\xf6\xef\xe9\x16\xec\x33\x00\x00\xff\xff\x68\xd8\xf6\xb1\x70\x01\x00\x00")

func migrations_compliance01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_compliance01_initSql,
		"migrations_compliance/01_init.sql",
	)
}

func migrations_compliance01_initSql() (*asset, error) {
	bytes, err := migrations_compliance01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_compliance/01_init.sql", size: 368, mode: os.FileMode(420), modTime: time.Unix(1458229094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_gateway01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\x73\x4c\xb4\x8b\xb4\x20\xb1\x5a\x09\x71\x08\xc4\xdb\x46\x0d\x81\x06\xe7\xc0\x29\x31\xc9\x34\xb5\x4a\x1c\x64\x3b\x94\xfe\xfb\x3a\x54\x2d\x8d\x51\x51\x7b\xb4\xfd\xcd\x78\xde\x7b\x33\x18\xc0\xaf\x9a\x57\x92\x69\x84\x74\xef\xcc\x13\xe2\x53\x02\xd4\x9f\x45\x04\xf2\x04\x0b\xe4\x07\x2c\x57\xec\xa5\x46\xa1\x73\x70\x1d\x80\x9c\x97\x39\x70\xa1\xdd\xe1\xd0\x83\x78\x49\x21\x4e\xa3\x08\xfc\x94\x2e\xb3\x30\x36\xf5\x0b\x12\xd3\xdf\x1d\xd7\xec\xd1\xb4\xe5\x8d\xc8\xba\x8a\x03\x93\xc5\x23\x93\xee\x68\x3c\x3e\x97\x9d\xb8\xbd\x6c\x0a\x54\x0a\xcb\x8c\x99\x2f\x4a\x33\x89\xe6\x35\x5a\x0c\xab\xb8\xa8\x32\xdd\x3c\xa1\xb8\xd6\x4b\x69\xa6\x5b\x75\x85\x58\x25\xe1\xc2\x4f\x36\x70\x47\x36\xe0\x76\x52\xbc\xee\x36\x8d\xc3\xfb\x94\x9c\x2e\xad\xb1\xdd\xfe\xd9\x73\x3c\x20\xf1\x4d\x18\x93\x69\x28\x44\x13\xcc\x20\x20\xff\xfd\x34\xa2\x30\xbf\xf5\x93\x35\xa1\xd3\x56\x3f\xfc\x9b\x38\x96\x91\x6b\xe3\x1e\x95\x4c\x28\x56\x74\x9d\x7e\x68\xa4\x2d\x6a\xf8\xc7\x56\xdd\xb4\xb2\xc0\x33\x30\xfe\x6b\x03\xed\xb6\xe6\x5a\x5f\xb5\x58\xb5\x45\x81\x58\xda\xcc\xbb\xbe\x0f\x6e\x87\x65\x85\x32\x87\x2d\xaf\xba\xe1\x47\x66\x98\x0b\x06\xc5\x01\x77\xc6\xb8\xec\x58\x1a\x52\xe3\x51\xf7\xff\x92\xa8\xda\x9d\x7e\x7b\xed\x45\x65\x77\xba\x8c\xeb\xbb\x01\x7c\x5e\xec\xa0\x79\x16\x4e\x90\x2c\x57\x5f\x2d\xf6\xa4\xf7\x6a\xa7\x35\x71\x5e\x03\x00\x00\xff\xff\x3d\x93\x11\xae\x26\x03\x00\x00")

func migrations_gateway01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway01_initSql,
		"migrations_gateway/01_init.sql",
	)
}

func migrations_gateway01_initSql() (*asset, error) {
	bytes, err := migrations_gateway01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/01_init.sql", size: 806, mode: os.FileMode(420), modTime: time.Unix(1455035425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations_compliance/01_init.sql": migrations_compliance01_initSql,
	"migrations_gateway/01_init.sql":    migrations_gateway01_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations_compliance": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_compliance01_initSql, map[string]*bintree{}},
	}},
	"migrations_gateway": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_gateway01_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
