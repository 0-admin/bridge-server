// Code generated by go-bindata.
// sources:
// mysql/mysql_01_init.sql
// postgres/postgres_01_init.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mysqlMysql_01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x4f\xc2\x40\x10\x85\xef\xfd\x15\x73\x2c\x51\x12\x21\xc1\x98\x10\x0e\x85\xae\xda\x58\x0a\x29\xdb\x03\xa7\x76\x69\xc7\xba\x91\xee\x92\xdd\x2d\xe2\xbf\x77\xab\x51\x64\x8d\x24\x7a\x9e\x6f\x66\xde\x7b\x33\xfd\x3e\x5c\x34\xbc\x56\xcc\x20\x64\x3b\x6f\x96\x92\x80\x12\xa0\xc1\x34\x26\x50\xa4\x58\x22\xdf\x63\xb5\x64\xaf\x0d\x0a\x53\x80\xef\x01\x14\xbc\x2a\x80\x0b\xe3\x0f\x06\x3d\x48\x16\x14\x92\x2c\x8e\x21\xc8\xe8\x22\x8f\x12\xdb\x3f\x27\x09\xbd\xec\x38\xb9\x43\x3b\x96\x4b\x91\x77\x1d\x7b\xa6\xca\x27\xa6\xfc\xe1\x68\x74\x6c\x7b\xe7\x76\x4a\x96\xa8\x35\x56\x39\xb3\x2b\x2a\xab\xc4\xf0\x06\x1d\x86\xd5\x5c\xd4\xb9\x91\xcf\x28\xce\xcd\xd2\x86\x99\x56\x9f\x21\x96\x69\x34\x0f\xd2\x35\x3c\x90\x35\xf8\x9d\x95\x9e\xd7\x03\x92\xdc\x45\x09\x99\x44\x42\xc8\x70\x0a\x21\xb9\x0d\xb2\x98\xc2\xec\x3e\x48\x57\x84\x4e\x5a\xf3\x78\x33\xf6\x9c\x68\x56\x36\x0f\xaa\x98\xd0\xac\xec\x2c\xfe\x31\x1a\x57\xe6\xe0\xca\xf5\x21\x5b\x55\xe2\x11\x18\x5d\xbb\x40\xbb\x69\xb8\x31\x67\x43\xd3\x6d\x59\x22\x56\x2e\xf3\xe9\xef\x8b\xdb\x62\x55\xa3\x2a\x60\xc3\xeb\x4e\xfc\xd0\x8a\xf9\xc1\xa0\xd8\xe3\xd6\x5e\x34\x3f\x54\x96\x34\x78\x30\xa7\xbb\x14\xea\x76\x6b\x3e\xaa\x27\xe1\xbb\x93\xfe\x7f\x80\xef\xaf\x1a\xca\x17\xe1\x85\xe9\x62\xf9\xdb\xab\x8e\x4f\xaa\xee\xb5\xc6\xde\x5b\x00\x00\x00\xff\xff\x57\x0e\x7e\x05\xf8\x02\x00\x00")

func mysqlMysql_01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_mysqlMysql_01_initSql,
		"mysql/mysql_01_init.sql",
	)
}

func mysqlMysql_01_initSql() (*asset, error) {
	bytes, err := mysqlMysql_01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/mysql_01_init.sql", size: 760, mode: os.FileMode(420), modTime: time.Unix(1453985025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresPostgres_01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x1b\x5b\x41\x25\x40\x0a\x4b\xa6\x40\x82\x84\x08\x6d\x14\x92\xa1\x53\xe4\xda\xa7\x60\x91\xd8\x91\x7d\x09\xe5\xdb\xe3\x32\x40\xe3\xb6\x8c\xf6\xef\xdd\x9f\xf7\x74\xab\x15\x5c\xf5\xaa\xb5\x9c\x10\xea\x81\x3d\x96\x59\x52\x65\x50\x25\x0f\x79\x06\x25\x0a\x54\x13\xca\x82\x7f\xf5\xa8\x09\x16\x0c\x40\x49\x70\x68\x15\xef\xae\xfd\xc3\x0c\xe8\x0b\x95\xd1\x8d\xff\x9e\xb8\x15\xef\xdc\x2e\xee\xa2\x68\x09\xeb\x4d\x05\xeb\x3a\xcf\x0f\xaa\xc1\x1a\x81\xce\xa1\x6c\x38\x01\xa9\x1e\x1d\xf1\x7e\x98\x4b\x78\xab\x74\xdb\x90\xf9\x40\x7d\xb9\x91\xaf\xa3\xd1\x5d\xe6\x45\xf9\xfc\x9a\x94\x5b\x78\xc9\xb6\xb0\x50\x72\xc9\x96\x31\x9b\x3b\x7a\xf3\x36\x2a\xcb\xb5\xe3\xe2\xb0\xf6\xa9\xa3\x60\xc4\xed\x4d\xb0\x81\x19\xad\xc0\x5f\x1c\xdd\x07\x78\xdc\xf5\x8a\xe8\x3f\xa7\x6e\x14\x02\x51\x86\x92\x34\x7b\x4a\xea\xfc\x4f\xd6\xa1\x6c\xd1\xc2\x4e\xf9\x5c\xe8\x84\xa2\x9e\xb0\xf3\xe1\x37\x7b\x69\x81\x70\x4f\xb3\x11\x16\xdd\xd8\xd1\x0f\x9b\x45\x15\x76\x39\x1b\xd7\xf1\x3d\xa4\xe6\x53\xb3\xb4\xdc\x14\xe7\xef\x21\x3e\x66\x41\xb2\x31\xfb\x0e\x00\x00\xff\xff\x95\xdd\x98\x31\x59\x02\x00\x00")

func postgresPostgres_01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgresPostgres_01_initSql,
		"postgres/postgres_01_init.sql",
	)
}

func postgresPostgres_01_initSql() (*asset, error) {
	bytes, err := postgresPostgres_01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/postgres_01_init.sql", size: 601, mode: os.FileMode(420), modTime: time.Unix(1453986637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mysql/mysql_01_init.sql": mysqlMysql_01_initSql,
	"postgres/postgres_01_init.sql": postgresPostgres_01_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mysql": &bintree{nil, map[string]*bintree{
		"mysql_01_init.sql": &bintree{mysqlMysql_01_initSql, map[string]*bintree{}},
	}},
	"postgres": &bintree{nil, map[string]*bintree{
		"postgres_01_init.sql": &bintree{postgresPostgres_01_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

